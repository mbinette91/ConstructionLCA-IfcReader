CMAKE_MINIMUM_REQUIRED (VERSION 2.8.12)

IF(NOT CMAKE_BUILD_TYPE)
   SET(CMAKE_BUILD_TYPE "Release")
ENDIF()

SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${CMAKE_BINARY_DIR}/${CMAKE_BUILD_TYPE})
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG ${CMAKE_BINARY_DIR}/${CMAKE_BUILD_TYPE})
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CMAKE_BINARY_DIR}/${CMAKE_BUILD_TYPE})
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR}/${CMAKE_BUILD_TYPE})
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR}/${CMAKE_BUILD_TYPE})
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR}/${CMAKE_BUILD_TYPE})


# Qt library
IF(Qt5)
  message(STATUS "Qt5=true. Qt5 is used")
  FIND_PACKAGE(Qt5Core REQUIRED)
  FIND_PACKAGE(Qt5Widgets REQUIRED)
  FIND_PACKAGE(Qt5OpenGL REQUIRED)
  ADD_DEFINITIONS(${Qt5Widgets_DEFINITIONS})
  INCLUDE_DIRECTORIES(${INCLUDE_DIRECTORIES} 
          ${QT_INCLUDES}
          ${QT_INCLUDE_DIR}
          ${QT_QT_INCLUDE_DIR}
          ${QT_QTCORE_INCLUDE_DIR}
          ${QT_QTGUI_INCLUDE_DIR}
          ${QT_QTOPENGL_INCLUDE_DIR}
          ${Qt5Widgets_INCLUDE_DIRS}
          )
ELSE(Qt5)
  FIND_PACKAGE(Qt4 REQUIRED)
  SET(QT_USE_QTOPENGL TRUE)
  INCLUDE(${QT_USE_FILE})
  ADD_DEFINITIONS(${QT_DEFINITIONS})
  ADD_DEFINITIONS(-DQT_GUI_LIBS -DQT_CORE_LIB)
  QT4_ADD_RESOURCES(SimpleViewerExample_RESOURCES_RCC ${IFCPP_SOURCE_DIR}/SimpleViewerExample/Resources/ifcplusplus.qrc)
  INCLUDE_DIRECTORIES(${INCLUDE_DIRECTORIES} 
          ${QT_INCLUDES}
          ${QT_INCLUDE_DIR}
          ${QT_QT_INCLUDE_DIR}
          ${QT_QTCORE_INCLUDE_DIR}
          ${QT_QTGUI_INCLUDE_DIR}
          ${QT_QTOPENGL_INCLUDE_DIR}
          )
ENDIF()

FIND_PACKAGE(OpenSceneGraph REQUIRED osgDB osgUtil osgGA osgFX osgSim osgText osgQt osgViewer)

INCLUDE_DIRECTORIES(${INCLUDE_DIRECTORIES} ${CARVE_SOURCE_DIR})
INCLUDE_DIRECTORIES(${INCLUDE_DIRECTORIES} ${CARVE_SOURCE_DIR}/include)
INCLUDE_DIRECTORIES(${INCLUDE_DIRECTORIES} ${CARVE_SOURCE_DIR}/src)
INCLUDE_DIRECTORIES(${INCLUDE_DIRECTORIES} ${CARVE_SOURCE_DIR}/common)
INCLUDE_DIRECTORIES(${INCLUDE_DIRECTORIES} ${CARVE_SOURCE_DIR}/src/common)
INCLUDE_DIRECTORIES(${INCLUDE_DIRECTORIES} ${CARVE_SOURCE_DIR}/src/include)
INCLUDE_DIRECTORIES(${INCLUDE_DIRECTORIES} ${CARVE_BINARY_DIR}/include) 
INCLUDE_DIRECTORIES(${INCLUDE_DIRECTORIES} ${IFCPP_SOURCE_DIR}/IfcPlusPlus/src/)
INCLUDE_DIRECTORIES(${INCLUDE_DIRECTORIES} ${IFCPP_SOURCE_DIR}/IfcPlusPlusGeometry/src/)
INCLUDE_DIRECTORIES(${INCLUDE_DIRECTORIES} ${IFCPP_SOURCE_DIR}/SimpleViewerExample/src/)
INCLUDE_DIRECTORIES( ${INCLUDE_DIRECTORIES} ${OPENTHREADS_INCLUDE_DIR} )
INCLUDE_DIRECTORIES( ${INCLUDE_DIRECTORIES} ${OSG_INCLUDE_DIR} )
INCLUDE_DIRECTORIES( ${INCLUDE_DIRECTORIES} ${OSGGA_INCLUDE_DIR} )
INCLUDE_DIRECTORIES( ${INCLUDE_DIRECTORIES} ${OSGDB_INCLUDE_DIR} )
INCLUDE_DIRECTORIES( ${INCLUDE_DIRECTORIES} ${OSGUTIL_INCLUDE_DIR} )
INCLUDE_DIRECTORIES( ${INCLUDE_DIRECTORIES} ${OSGQT_INCLUDE_DIR} )
INCLUDE_DIRECTORIES( ${INCLUDE_DIRECTORIES} ${OSGANIMATION_INCLUDE_DIR} )
INCLUDE_DIRECTORIES( ${INCLUDE_DIRECTORIES} ${OSGANIMATION_INCLUDE_DIR} )
INCLUDE_DIRECTORIES( ${INCLUDE_DIRECTORIES} ${OSG_BINARY_DIR}/include ) 

# For the generated Config file
SET(IFCPPVIEWER_SOURCE_FILES 
  src/IfcPlusPlusSystem.cpp
  src/ViewController.cpp
  src/main.cpp
  src/cmd/CmdRemoveSelectedObjects.cpp
  src/cmd/CmdWriteIfcFile.cpp
  src/cmd/Command.cpp
  src/cmd/CommandManager.cpp
  src/cmd/LoadIfcFileCommand.cpp
  src/gui/IfcTreeWidget.cpp
  src/gui/MainWindow.cpp
  src/gui/TabReadWrite.cpp
  src/gui/TabView.cpp
  src/viewer/OrbitCameraManipulator.cpp
  src/viewer/ViewerWidget.cpp
)

SET(IFCPPVIEWER_MOC_FILES
  src/IfcPlusPlusSystem.h
  src/gui/IfcTreeWidget.h
  src/gui/MainWindow.h
  src/gui/TabReadWrite.h
  src/gui/TabView.h
)

FIND_PACKAGE(Boost) 
IF(Boost_FOUND)
    INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS}) 
	ADD_DEFINITIONS( -DCARVE_SYSTEM_BOOST )
ENDIF()

IF(Qt5)
  QT5_WRAP_CPP( IFCPPVIEWER_MOC_GENERATED_FILES ${IFCPPVIEWER_MOC_FILES})
ELSE(Qt5)
  QT4_WRAP_CPP( IFCPPVIEWER_MOC_GENERATED_FILES ${IFCPPVIEWER_MOC_FILES})
ENDIF()

LINK_DIRECTORIES (${LINK_DIRECTORIES} ${CMAKE_BINARY_DIR}/${CMAKE_BUILD_TYPE}) 
LINK_DIRECTORIES (${LINK_DIRECTORIES} ${CARVE_BINARY_DIR}/lib) 
LINK_DIRECTORIES (${LINK_DIRECTORIES} ${CARVE_BINARY_DIR}/common) 
LINK_DIRECTORIES (${LINK_DIRECTORIES} ${CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG}) 
LINK_DIRECTORIES (${LINK_DIRECTORIES} ${CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE}) 


ADD_EXECUTABLE(SimpleViewerExample 
  ${IFCPPVIEWER_MOC_GENERATED_FILES}
  ${IFCPPVIEWER_SOURCE_FILES}
  ${SimpleViewerExample_RESOURCES_RCC}
)

IF(Qt5)
  QT5_USE_MODULES(SimpleViewerExample Core Gui Widgets OpenGL)
ENDIF()

TARGET_LINK_LIBRARIES(SimpleViewerExample ${OPENTHREADS_LIBRARY} )
TARGET_LINK_LIBRARIES(SimpleViewerExample ${OSG_LIBRARY} )
TARGET_LINK_LIBRARIES(SimpleViewerExample ${OSGDB_LIBRARY} )
TARGET_LINK_LIBRARIES(SimpleViewerExample ${OSGGA_LIBRARY} )
TARGET_LINK_LIBRARIES(SimpleViewerExample ${OSGUTIL_LIBRARY} )
TARGET_LINK_LIBRARIES(SimpleViewerExample ${OSGANIMATION_LIBRARY} )
TARGET_LINK_LIBRARIES(SimpleViewerExample ${OSGFX_LIBRARY} )
TARGET_LINK_LIBRARIES(SimpleViewerExample ${OSGQT_LIBRARY} )
TARGET_LINK_LIBRARIES(SimpleViewerExample ${OSGVIEWER_LIBRARY} )
TARGET_LINK_LIBRARIES(SimpleViewerExample ${QT_LIBRARIES})
TARGET_LINK_LIBRARIES(SimpleViewerExample IfcPlusPlusGeometry)

IF(CMAKE_COMPILER_IS_GNUCXX)
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=gnu++11")
ENDIF()